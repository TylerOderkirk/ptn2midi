{"name":"ptn2midi","tagline":"Export your Roland SP-404SX patterns and samples to MIDI and SoundFont files","body":"### Introduction\r\nThe Roland SP-404SX Sampler is well-made, portable, _and_ it has a slick user interface. Unfortunately its samples and patterns are stored in an undocumented proprietary format on an SD card.\r\n\r\nUntil now, the only way to collaborate with other producers and Digital Audio Workstation (\"DAW\") users was to \"play\" a pattern on the sampler and record its line-out to a single stereo track. This eliminates the ability to apply per-sample effects and make fine-grained changes to the arrangement.\r\n\r\nWith the help of ModuLR's notes on [SP-FORUMS](http://sp-forums.com/), I've created a utility in Python called \"ptn2midi\" that translates a pattern on the SP-40SX's SD card to a MIDI (`.mid`) file and a SoundFont v1.2 (`.sf2`) file.\r\n\r\nThe MIDI file includes the note pitches, durations, and timing data. The SoundFont file contains the associated samples, trimmed, just as they were on the sampler itself.\r\n\r\n### How to use the utility\r\n1. Create a pattern on the SP-404SX. Store it, for example, on pad A1\r\n2. Download and extract the ptn2midi repository from https://github.com/TylerOderkirk/ptn2midi/archive/master.zip\r\n3. Install [the MIDIUtil Python library](http://www.emergentmusics.org/midiutil)\r\n4. Insert the sampler's SD card into your computer and run the utility: `./ptn2midi.py /media/tz/SP-404SX/ A1 95` where the first argument is the path (with trailing delimiter) to the SD card, the second is the name of the pattern, and the third is the tempo\r\n5. Load the resulting files e.g. `PTN_A1.mid` and `PTN_A1.sf2` into your DAW of choice\r\n\r\n### Demonstration\r\nI loaded the factory default samples and created a pattern at 95 BPM on pad F1. [Here's a recording from the sampler's line-out](https://soundcloud.com/dj_toadstool/ptn-f1-roland-line-out-recorded). Pay no mind to the clipping!\r\n\r\n![My sampler playing the pattern](https://raw.githubusercontent.com/TylerOderkirk/ptn2midi/gh-pages/images/playing_pattern_on_sp-404sx_imgflip_a0fwj.gif)\r\n\r\nAnd... [here's what I got](https://soundcloud.com/dj_toadstool/ptn-f1-ableton-export) when I created a new track in Ableton Live 9, imported the `.sf2` and `.mid` files from the utility, and did \"Export audio/video\".\r\n\r\n![Ableton's MIDI note editor view](https://raw.githubusercontent.com/TylerOderkirk/ptn2midi/gh-pages/images/ableton_midi_note_editor.gif)\r\n\r\nThis is a portion of the program's debugging output:\r\n```\r\n[...]\r\nPad(start=512, end=91068, user_start=512, user_end=91068, volume=127, lofi=False, loop=False, gate=True, reverse=False, unknown1=1, channels=1, tempo_mode=0, tempo=1168, user_tempo=1168)\r\nPad(start=512, end=87612, user_start=512, user_end=87612, volume=127, lofi=False, loop=False, gate=True, reverse=False, unknown1=1, channels=1, tempo_mode=0, tempo=1215, user_tempo=1215)\r\nPad(start=512, end=83132, user_start=512, user_end=83132, volume=127, lofi=False, loop=False, gate=True, reverse=False, unknown1=1, channels=1, tempo_mode=0, tempo=1281, user_tempo=1281)\r\nPad(start=512, end=87872, user_start=512, user_end=87872, volume=127, lofi=False, loop=False, gate=True, reverse=False, unknown1=1, channels=1, tempo_mode=0, tempo=1211, user_tempo=1211)\r\n[...]\r\nNote(delay=144, pad=47, bank_switch=1, unknown2=0, velocity=127, unknown3=64, length=113)\r\nNote(delay=144, pad=47, bank_switch=1, unknown2=0, velocity=127, unknown3=64, length=137)\r\nNote(delay=96, pad=49, bank_switch=1, unknown2=0, velocity=127, unknown3=64, length=84)\r\nNote(delay=136, pad=47, bank_switch=1, unknown2=0, velocity=127, unknown3=64, length=122)\r\n[...]\r\npitch: 36 - /media/tz/SP-404SX/ROLAND/SP-404SX/SMPL/F0000001.WAV -> /tmp/F0000001.WAV_mono.wav -> template01.wav\r\npitch: 37 - /media/tz/SP-404SX/ROLAND/SP-404SX/SMPL/F0000003.WAV -> /tmp/F0000003.WAV_mono.wav -> template02.wav\r\npitch: 38 - /media/tz/SP-404SX/ROLAND/SP-404SX/SMPL/F0000002.WAV -> /tmp/F0000002.WAV_mono.wav -> template03.wav\r\n[...]\r\n```\r\n\r\n### How it works\r\n1. `get_pad_info()` - The utility parses PAD_INFO.BIN from the SD card to determine the \"start\" and \"end\" points for every sample on the SD card. These points have been set\r\nwith the \"Mark\" button and \"Start/End\" feature on the sampler\r\n2. `get_pattern()` - The utility parses the .BIN file corresponding to the pattern to determine when, and for how long, each \"note\" in the pattern should be played\r\n3. `create_midi_file()` - The utility assigns a unique pitch (starting at C1[36]) to each sample used by the pattern, truncating each and converting it to a single channel (see \"Future Improvements\"), overwriting the WAVs of an included \"template\" SoundFont\r\n4. `create_soundfont()` - The utility assembles the samples and associated pitches into a SoundFont v2.1 (.sf2) file using pysf and a SoundFont descriptor named template.xml\r\n\r\n![System architecture diagram](https://raw.githubusercontent.com/TylerOderkirk/ptn2midi/gh-pages/images/sys_arch_print_preview.png)\r\n\r\n### Future Improvements:\r\n1. Support more than 12 samples per pattern. Trivial - expand Template .xml\r\n2. Support stereo samples. Trivial - assign two samples (left and right) per SoundFont pitch/note\r\n3. Support AIF samples. Trivial - convert to PCM WAV intitially\r\n4. Support \"looped\" samples. Use `<loop>` entries in `<wavetable>` nodes in `template.xml`? `create_looped_wav()`?\r\n5. Support platforms other than Ubuntu Linux Saucy (13.10). Temporary file locations\r\n6. Implement robust command-line argument parsing\r\n7. Support other samplers in the Roland SP family\r\n8. Support DAWs other than Ableton Live 9\r\n9. Support creation of \"superset\" SoundFonts comprised of samples from more than 1 patterns\r\n10. Replicate effects such as \"lo-fi\", \"reverse\", etc on the host machine\r\n\r\n### Thanks/Credits\r\n**Chris** for sharing his Ableton knowledge and for dealing with _a lot_ of broken SoundFont files. **Ben Collver** for placing his [excellent Python SoundFont library, pysf](http://code.terrorpin.net/pysf/index), in the Public Domain. **Mark Conway Wirt** for his MIDIUtil Python library. **Mark Germani** and [HammerSound](http://www.hammersound.com/) for the \"Cola\" SoundFont I created my \"template\" SoundFont from. **EnjoyPA** [on FreeSound.org](https://www.freesound.org/people/EnjoyPA/) for the WAVs I used in the \"template\".\r\n","google":"UA-50714982-1","note":"Don't delete this file! It's used internally to help with page regeneration."}